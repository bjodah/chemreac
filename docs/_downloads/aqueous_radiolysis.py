#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Aqueous radiolysis
------------------

:download:`examples/aqueous_radiolysis.py` is an example of a rather large
system of reactions.

::

 $ python analytic_diffusion.py --help

.. exec::
   echo "::\\n\\n"
   python examples/examples/aqueous_radiolysis.py --help | sed "s/^/   /"


Here is an example generated by:

::

 $ python analytic_diffusion.py --doserate 25 --plot \
    --savefig analytic_diffusion.png


.. image:: ../_generated/aqueous_radiolysis.png


"""

# stdlib imports
import json
import os
from math import log, e, exp

# external imports
import argh
import numpy as np

# project internal imports
from chemreac import ReactionDiffusion
from chemreac.integrate import run
from chemreac.serialization import load
from chemreac.util.plotting import plot_C_vs_t_in_bin, save_and_or_show_plot


def integrate_rd(t0=1e-7, tend=.1, doserate=15, N=1000, nt=512, plot=False,
                 logy=False, logt=False, name='aqueous_radiolysis',
                 num_jacobian=False, savefig='None'):
    """
    Integrates the reaction system defined by
    :download:`aqueous_radiolysis.json <examples/aqueous_radiolysis.json>`
    """
    null_conc = 1e-24

    mu = 1.0  # linear attenuation
    rho = 1.0  # kg/dm3
    rd = load(os.path.join(os.path.dirname(__file__), name+'.json'),
              ReactionDiffusion, N=N, logy=logy,
              logt=logt, bin_k_factor=[
                  [doserate*rho*exp(-mu*i/N)] for i in range(N)])
    y0_by_name = json.load(open(os.path.join(os.path.dirname(__file__),
                                             name+'.y0.json'), 'rt'))

    # y0 with a H2 gradient
    y0 = np.array([[y0_by_name.get(k, null_conc) if k != 'H2' else
                    1e-3/(i+2) for k in rd.substance_names]
                   for i in range(rd.N)])

    tout = np.logspace(log(t0), log(tend), nt+1, base=e)
    integr = run(rd, y0, tout, with_jacobian=(not num_jacobian))

    print("texec={0}, f.neval={1}, jac.neval={2}".format(
        integr.info['texec'], integr.info['neval_f'], integr.info['neval_j']))

    if plot:
        import matplotlib.pyplot as plt
        bt_fmtstr = ("C(t) in bin {{0:.2g}}-{{1:.2g}} "
                     "with local doserate {}")
        ax = plt.subplot(2, 1, 1)
        plot_C_vs_t_in_bin(
            rd, tout, integr.Cout, 0, ax, substances=('H2', 'H2O2'),
            ttlfmt=bt_fmtstr.format(rd.bin_k_factor[0][0]))
        ax = plt.subplot(2, 1, 2)
        plot_C_vs_t_in_bin(
            rd, tout, integr.Cout, N-1, ax, substances=('H2', 'H2O2'),
            ttlfmt=bt_fmtstr.format(rd.bin_k_factor[N-1][0]))
        plt.tight_layout()
        save_and_or_show_plot(savefig=savefig)


if __name__ == '__main__':
    argh.dispatch_command(integrate_rd)
